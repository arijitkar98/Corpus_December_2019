network service computer networking network service application running network application layer provides data storage manipulation presentation communication capability often implemented using clientserver peertopeer architecture based application layer network protocols service usually provided server component running one computers often dedicated server computer offering multiple services accessed via network client components running devices however client server components run machine clients servers often user interface sometimes hardware associated examples examples domain name system dns translates domain names internet protocol ip addresses dynamic host configuration protocol dhcp assign networking configuration information network hosts authentication servers identify authenticate users provide user account profiles may log usage statistics email printing distributed network file system services common services local area networks require users permissions access shared resources network services include directory services email file sharing instant messaging online game printing file server voice ip video demand video telephony world wide web simple network management protocol time service wireless sensor network application layer computer network programming application layer abstraction layer reserved communications protocols methods designed processtoprocess communications across internet protocol ip computer network application layer protocols use underlying transport layer protocols establish hosttohost connections network services tcpip network services port numbers many internet protocolbased services associated particular wellknown port number standardized internet technical governance example worldwideweb servers operate port 80 email relay servers usually listen port 25 tcp versus udp different services use different packet transmission techniques general packets must get correct order without loss use tcp whereas real time services later packets important older packets use udp example file transfer requires complete accuracy normally done using tcp audio conferencing frequently done via udp momentary glitches may noticed udp lacks builtin network congestion avoidance protocols use must extremely carefully designed prevent network collapse middleware middleware computer software provides services software applications beyond available operating system described software glue middleware makes easier software developers implement communication inputoutput focus specific purpose application gained popularity 1980s solution problem link newer applications older legacy systems although term use since 1968 distributed applications term commonly used software enables communication management data distributed applications ietf workshop 2000 defined middleware services found transport ie tcpip layer set services application environment ie applicationlevel apis specific sense middleware described dash clientserver peertopeer middleware includes web servers application servers content management systems similar tools support application development delivery objectweb defines middleware software layer lies operating system applications side distributed computing system network services regarded middleware include enterprise application integration data integration message oriented middleware mom object request brokers orbs enterprise service bus esb database access services often characterised middleware language specific implementations support heterogeneous features related communication features examples databaseoriented middleware include odbc jdbc transaction processing monitors distributed computing system middleware loosely divided two categoriesthose provide humantime services web request servicing perform machinetime latter middleware somewhat standardized service availability forum commonly used complex embedded systems within telecom defense aerospace industries examples term middleware used contexts well middleware sometimes used similar sense software driver abstraction layer hides detail hardware devices software application android operating system uses linux kernel core also provides application framework developers incorporate applications addition android provides middleware layer including libraries provide services data storage screen display multimedia web browsing middleware libraries compiled machine language services execute quickly middleware libraries also implement devicespecific functions applications application framework need concern variations various android devices androids middleware layer also contains art virtual machine core java application libraries game engine software gamebryo renderware sometimes described middleware provide many services simplify game development simulation technology middleware generally used context high level architecture hla applies many distributed simulations layer software lies application code runtime infrastructure middleware generally consists library functions enables number applicationssimulations federates hla terminologyto page functions common library rather recreate application wireless networking developers use middleware meet challenges associated wireless sensor network wsn implementing middleware application allows wsn developers integrate operating systems hardware wide variety various applications currently available qnx operating system offers middleware providing multimedia services use automobiles aircraft environments radiofrequency identification rfid software toolkits provide middleware filter noisy redundant raw data communication protocol telecommunication communication protocol system rules allow two entities communications system transmit information via kind variation physical quantity protocol defines rules syntax semantics synchronization communication possible error recovery methods protocols may implemented hardware software combination communicating systems use welldefined formats exchanging various messages message exact meaning intended elicit response range possible responses predetermined particular situation specified behavior typically independent implemented communication protocols agreed upon parties involved reach agreement protocol may developed technical standard programming language describes computations close analogy protocols programming languages protocols communication programming languages computations alternate formulation states protocols communication algorithms computation multiple protocols often describe different aspects single communication group protocols designed work together known protocol suite implemented software protocol stack internet communication protocols published internet engineering task force ietf ieee handles wired wireless networking international organization standardization iso handles types itut handles telecommunication protocols formats public switched telephone network pstn pstn internet converge standards also driven towards convergence communicating systems information exchanged devices network media governed rules conventions set communication protocol specifications nature communication actual data exchanged statedependent behaviors defined specifications digital computing systems rules expressed algorithms data structures protocols communication algorithms programming languages computations operating systems usually contain set cooperating processes manipulate shared data communicate communication governed wellunderstood protocols embedded process code contrast shared memory communicating systems communicate using shared transmission medium transmission necessarily reliable individual systems may use different hardware operating systems implement networking protocol protocol software modules interfaced framework implemented machines operating system framework implements networking functionality operating system protocol algorithms expressed portable programming language protocol software may made operating system independent best known frameworks tcpip model osi model time internet developed abstraction layering proven successful design approach compiler operating system design given similarities programming languages communication protocols originally monolithic networking programs decomposed cooperating protocols gave rise concept layered protocols nowadays forms basis protocol design systems typically use single protocol handle transmission instead use set cooperating protocols sometimes called protocol suite best known protocol suites tcpip ipxspx x25 ax25 appletalk protocols arranged based functionality groups instance group transport protocols functionalities mapped onto layers layer solving distinct class problems relating instance application transport internet network interfacefunctions transmit message protocol selected layer selection next protocol accomplished extending message protocol selector layer basic requirements getting data across network part problem protocol data received evaluated context progress conversation protocol must include rules describing context kind rules said express syntax communication rules determine whether data meaningful context exchange takes place kind rules said express semantics communication messages sent received communicating systems establish communication protocols therefore specify rules governing transmission general much following addressed data formats data exchange digital message bitstrings exchanged bitstrings divided fields field carries information relevant protocol conceptually bitstring divided two parts called header payload actual message carried payload header area contains fields relevance operation protocol bitstrings longer maximum transmission unit mtu divided pieces appropriate size address formats data exchange addresses used identify sender intended receivers addresses carried header area bitstrings allowing receivers determine whether bitstrings interest processed ignored connection sender receiver identified using address pair sender address receiver address usually address values special meanings 1 address could taken mean addressing stations network sending address would result broadcast local network rules describing meanings address value collectively called addressing scheme address mapping sometimes protocols need map addresses one scheme addresses another scheme instance translate logical ip address specified application ethernet mac address referred address mapping routing systems directly connected intermediary systems along route intended receivers need forward messages behalf sender internet networks connected using routers interconnection networks routers called internetworking detection transmission errors error detection necessary networks data corruption possible common approach crcs data area added end packets making possible receiver detect differences caused corruption receiver rejects packets crc differences arranges somehow retransmission acknowledgements acknowledgement correct reception packets required connectionoriented communication acknowledgements sent receivers back respective senders loss information timeouts retries packets may lost network delayed transit cope protocols sender may expect acknowledgement correct reception receiver within certain amount time thus timeouts sender may need retransmit information case permanently broken link retransmission effect number retransmissions limited exceeding retry limit considered error direction information flow direction needs addressed transmissions occur one direction time halfduplex links one sender time shared medium known media access control arrangements made accommodate case collision contention two parties respectively simultaneously transmit wish transmit sequence control long bitstrings divided pieces sent network individually pieces may get lost delayed types networks take different routes destination result pieces may arrive sequence retransmissions result duplicate pieces marking pieces sequence information sender receiver determine lost duplicated ask necessary retransmissions reassemble original message flow control flow control needed sender transmits faster receiver intermediate network equipment process transmissions flow control implemented messaging receiver sender queueing communicating processes state machines employ queues buffers usually fifo queues deal messages order sent may sometimes multiple queues different prioritisation protocol design systems engineering principles applied create set common network protocol design principles design complex protocols often involves decomposition simpler cooperating protocols set cooperating protocols sometimes called protocol family protocol suite within conceptual framework communicating systems operate concurrently important aspect concurrent programming synchronization software receiving transmitting messages communication proper sequencing concurrent programming traditionally topic operating systems theory texts formal verification seems indispensable concurrent programs notorious hidden sophisticated bugs contain mathematical approach study concurrency communication referred communicating sequential processes csp concurrency also modeled using finite state machines mealy moore machines mealy moore machines use design tools digital electronics systems encountered form hardware used telecommunication electronic devices general literature presents numerous analogies computer communication programming analogy transfer mechanism protocol comparable central processing unit cpu framework introduces rules allow programmer design cooperating protocols independently one another layering modern protocol design protocols layered form protocol stack layering design principle divides protocol design task smaller steps accomplishes specific part interacting parts protocol small number welldefined ways layering allows parts protocol designed tested without combinatorial explosion cases keeping design relatively simple communication protocols use internet designed function diverse complex settings internet protocols designed simplicity modularity fit coarse hierarchy functional layers defined internet protocol suite first two cooperating protocols transmission control protocol tcp internet protocol ip resulted decomposition original transmission control program monolithic communication protocol layered communication suite osi model developed internationally based experience networks predated internet reference model general communication much stricter rules protocol interaction rigorous layering typically application software built upon robust data transport layer underlying transport layer datagram delivery routing mechanism typically connectionless internet packet relaying across networks happens another layer involves network link technologies often specific certain physical layer technologies ethernet layering provides opportunities exchange technologies needed example protocols often stacked tunneling arrangement accommodate connection dissimilar networks example ip may tunneled across asynchronous transfer mode atm network protocol layering protocol layering forms basis protocol design allows decomposition single complex protocols simpler cooperating protocols protocol layers solve distinct class communication problems together layers make layering scheme model computations deal algorithms data communication involves protocols messages analog data flow diagram kind message flow diagram visualize protocol layering protocol suites diagram message flows two systems b shown figure 3 systems make use protocol suite vertical flows protocols system horizontal message flows protocols systems message flows governed rules data formats specified protocols blue lines therefore mark boundaries horizontal protocol layers vertical protocols layered obey protocol layering principle states layered protocol designed layer n destination receives exactly object sent layer n source horizontal protocols layered protocols belong protocol suite layered protocols allow protocol designer concentrate one layer time without worrying layers perform vertical protocols need protocols systems satisfy minimal assumptions ensure protocol layering principle holds layered protocols achieved using technique called encapsulation usually message stream data divided small pieces called messages streams packets ip datagrams network frames depending layer pieces transmitted pieces contain header area data area data header area identifies source destination network packet protocol data meaningful protocol like crcs data sent data length timestamp rule enforced vertical protocols pieces transmission encapsulated data area lower protocols sending side reverse happen receiving side result lowest level piece looks like header1header2header3data layer directly header2header3data top layer header3data sending receiving side rule therefore ensures protocol layering principle holds effectively virtualizes lowest transmission lines reason message flows coloured red figure 3 ensure sides use protocol pieces also carry data identifying protocol header design protocol layering network internet architecture interrelated one designed without important features respect internet architecture network services provides described next internet offers universal interconnection means pair computers connected internet allowed communicate computer identified address internet interconnected physical networks appear user single large network interconnection scheme called internetwork internet conceptually internet addresses consists netid hostid netid identifies network hostid identifies host term host misleading individual computer multiple network interfaces internet address internet address identifies connection network individual computer netid used routers decide send packet network technology independence achieved using lowlevel address resolution protocol arp used map internet addresses physical addresses mapping called address resolution way physical addresses used protocols network interface layer tcpip protocols make use almost underlying communication technology physical networks interconnected routers routers forward packets interconnected networks making possible hosts reach hosts physical networks message flows two communicating systems b presence router r illustrated figure 4 datagrams passed router router router reached deliver datagram physically attached network called direct delivery decide whether datagram delivered directly sent router closer destination table called ip routing table consulted table consists pairs networkids paths taken reach known networks path indication datagram delivered directly address router known closer destination special entry specify default router chosen known paths networks treated equal lan wan pointtopoint link two computers considered one network connectionless packet delivery packetswitched system service offered internet adapts well different hardware including besteffort delivery mechanisms like ethernet connectionless delivery means messages streams divided pieces multiplexed separately high speed intermachine connections allowing connections used concurrently piece carries information identifying destination delivery packets said unreliable packets may lost duplicated delayed delivered order without notice sender receiver unreliability arises resources exhausted underlying networks fail unreliable connectionless delivery system defined internet protocol ip protocol also specifies routing function chooses path data sent also possible use tcpip protocols connection oriented systems connection oriented systems build virtual circuits paths exclusive use senders receivers built ip datagrams sent data virtual circuits forwarded data ip protocol modules technique called tunneling used x25 networks atm networks reliable stream transport service using unreliable connectionless packet delivery service defined transmission control protocol tcp services layered well application programs residing layer called application services make use tcp programs wishing interact packet delivery system using user datagram protocol udp software layering established protocol layering protocols protocol designer resume software design software layered organization relationship protocol layering visualized figure 5 software modules implementing protocols represented cubes information flow modules represented arrows top two horizontal red arrows virtual blue lines mark layer boundaries send message system top module interacts module directly hands message encapsulated module reacts encapsulating message data area filling header data accordance protocol implements interacts module handing newly formed message whenever appropriate bottom module directly interacts bottom module system b message sent across receiving system b reverse happens ultimately assuming transmission errors protocol violations etc message gets delivered original form topmodule system b protocol errors receiving module discards piece received reports back error condition original source piece layer handing error message case bottom module sending across division message stream data pieces subsequent reassembly handled layer introduced divisionreassembly reassembly done destination ie intermediate routers program translation divided four subproblems compiler assembler link editor loader result translation software layered well allowing software layers designed independently noting ways conquer complexity program translation could readily applied protocols analogy programming languages protocols designers tcpip protocol suite keen imposing layering software framework seen tcpip layering considering translation pascal program message compiled function application layer assembler program assembled function transport layer object code pieces linked function internet layer together library object code routing table link editor producing relocatable machine code datagram passed loader fills memory locations ethernet addresses produce executable code network frame loaded function network interface layer physical memory transmission medium show closely analogy fits terms parentheses previous sentence denote relevant analogs terms written cursively denote data representations program translation forms linear sequence layers output passed input next layer furthermore translation process involves multiple data representations thing seen happening protocol software multiple protocols define data representations data passed software modules modules application layer generally considered part operating system passing data modules much less expensive passing data application program transport layer boundary application layer transport layer called operating system boundary strict layering strictly adhering layered model practice known strict layering always best approach networking strict layering serious impact performance implementation least tradeoff simplicity performance use protocol layering today ubiquitous across field computer networking historically criticized many researchers two principal reasons firstly abstracting protocol stack way may cause higher layer duplicate functionality lower layer prime example error recovery perlink basis endtoend basis design patterns application layer protocols commonly reoccurring problems design implementation communication protocols addressed patterns several different pattern languages pattern language applicationlevel communication protocols commdp service design patterns patterns enterprise application architecture patternoriented software architecture pattern language distributed computing first pattern languages focuses design protocols implementations others address issues either areas latter formal specification formal methods describing communication syntax abstract syntax notation one iso standard augmented backusnaur form ietf standard finite state machine models communicating finitestate machines used formally describe possible interactions protocol protocol development communication occur protocols selected rules expressed algorithms data structures hardware operating system independence enhanced expressing algorithms portable programming language source code may considered protocol specification source independence specification provides wider interoperability protocol standards commonly created obtaining approval support standards organization initiates standardization process activity referred protocol development members standards organization agree adhere work result voluntary basis often members control large marketshares relevant protocol many cases standards enforced law government thought serve important public interest getting approval important protocol cases protocol standards sufficient gain widespread acceptance ie sometimes source code needs disclosed enforced law government interest public standardization process standardization process starts iso commissioning subcommittee workgroup workgroup issues working drafts discussion documents interested parties including standards bodies order provoke discussion comments generate lot questions much discussion usually disagreement standard provide satisfy needs usually conflicting views taken account often way compromise progress draft proposal working group draft proposal discussed member countries standard bodies organizations within country comments suggestions collated national views formulated members iso vote proposal rejected draft proposal consider objections counterproposals create new draft proposal another vote lot feedback modification compromise proposal reaches status draft international standard ultimately international standard process normally takes several years complete original paper draft created designer differ substantially standard contain following features various optional modes operation example allow setup different packet sizes startup time parties could reach consensus optimum packet size parameters left undefined allowed take values defined set discretion implementor often reflects conflicting views members parameters reserved future use reflecting members agreed facility provided could reach agreement done available time various inconsistencies ambiguities inevitably found implementing standard international standards reissued periodically handle deficiencies reflect changing views subject osi standardization lesson learned arpanet predecessor internet standardization protocols enough protocols also need framework operate therefore important develop generalpurpose futureproof framework suitable structured protocols layered protocols standardization would prevent protocol standards overlapping functionality would allow clear definition responsibilities protocol different levels layers gave rise osi open systems interconnection reference model rmosi used framework design standard protocols services conforming various layer specifications osi model communicating systems assumed connected underlying physical medium providing basic unspecified transmission mechanism layers numbered one seven n th layer referred nlayer layer provides service layer top application process using services layer immediately layers communicate means interface called service access point corresponding layers system called peer entities communicate two peer entities given layer use nprotocol implemented using services n1layer systems directly connected intermediate peer entities called relays used address uniquely identifies service access point address naming domains need restricted one layer possible use one naming domain layers layer two types standards protocol standards defining peer entities given layer communicate service standards defining given layer communicates layer original version rmosi layers functionality highest lowest layer application layer may provide following services application processes identification intended communication partners establishment necessary authority communicate determination availability authentication partners agreement privacy mechanisms communication agreement responsibility error recovery procedures ensuring data integrity synchronization cooperating application processes identification constraints syntax eg character sets data structures determination cost acceptable quality service selection dialogue discipline including required logon logoff procedures presentation layer may provide following services application layer request establishment session data transfer negotiation syntax used application layers necessary syntax transformations formatting special purpose transformations eg data compression data encryption session layer may provide following services presentation layer establishment release session connections normal expedited data exchange quarantine service allows sending presentation entity instruct receiving session entity release data presentation entity without permission interaction management presentation entities control whose turn perform certain control functions resynchronization session connection reporting unrecoverable exceptions presentation entity transport layer provides reliable transparent data transfer costeffective way required selected quality service may support multiplexing several transport connections one network connection split one transport connection several network connections network layer setup maintenance release network paths transport peer entities relays needed routing relay functions provided layer quality service negotiated network transport entities time connection set layer also responsible network congestion control data link layer setup maintenance release data link connections errors occurring physical layer detected may corrected errors reported network layer exchange data link units including flow control defined layer physical layer describes details like electrical characteristics physical connection transmission techniques used setup maintenance clearing physical connections contrast tcpip layering scheme assumes connectionless network rmosi assumed connectionoriented network connectionoriented networks suitable wide area networks connectionless networks suitable local area networks using connections communicate implies form session virtual circuits hence tcpip model lacking session layer constituent members iso mostly concerned wide area networks development rmosi concentrated connection oriented networks connectionless networks mentioned addendum rmosi time ietf cope fact internet needed protocols simply result ietf developed standardization process based rough consensus running code standardization process described rfc2026 nowadays ietf become standards organization protocols use internet rmosi extended model include connectionless services tcp ip could developed international standards taxonomies classification schemes protocols usually focus domain use function example domain use connectionoriented protocols connectionless protocols used connectionoriented networks connectionless networks respectively example function tunneling protocol used encapsulate packets highlevel protocol packets passed across transport system using highlevel protocol layering scheme combines function domain use dominant layering schemes ones proposed ietf iso despite fact underlying assumptions layering schemes different enough warrant distinguishing two common practice compare two relating common protocols layers two schemes layering scheme ietf called internet layering tcpip layering layering scheme iso called osi model iso layering networking equipment configuration termofart distinction often drawn term protocol strictly refers transport layer term service refers protocols utilizing protocol transport common case tcp udp services distinguished port numbers conformance port numbers voluntary content inspection systems term service strictly refers port numbers term application often used refer protocols identified inspection signatures virtual machine computing virtual machine vm emulation computer system virtual machines based computer architectures provide functionality physical computer implementations may involve specialized hardware software combination different kinds virtual machines different functions system virtual machines also termed full virtualization vms provide substitute real machine provide functionality needed execute entire operating systems hypervisor uses native execution share manage hardware allowing multiple environments isolated one another yet exist physical machine modern hypervisors use hardwareassisted virtualization virtualizationspecific hardware primarily host cpus process virtual machines designed execute computer programs platformindependent environment virtual machines qemu designed also emulate different architectures allow execution software applications operating systems written another cpu architecture operatingsystemlevel virtualization allows resources computer partitioned via kernel terms universally interchangeable definitions virtual machine originally defined popek goldberg efficient isolated duplicate real computer machine current use includes virtual machines direct correspondence real hardware physical realworld hardware running vm generally referred host virtual machine emulated machine generally referred guest host emulate several guests emulate different operating systems hardware platforms system virtual machines desire run multiple operating systems initial motive virtual machines allow timesharing among several singletasking operating systems respects system virtual machine considered generalization concept virtual memory historically preceded ibms cpcms first systems allow full virtualization implemented time sharing providing user singleuser operating system conversational monitor system cms unlike virtual memory system virtual machine entitled user write privileged instructions code approach certain advantages adding inputoutput devices allowed standard system technology evolves virtual memory purposes virtualization new systems memory overcommitment may applied manage memory sharing among multiple virtual machines one computer operating system may possible share memory pages identical contents among multiple virtual machines run physical machine may result mapping physical page technique termed kernel samepage merging ksm especially useful readonly pages holding code segments case multiple virtual machines running similar software software libraries web servers middleware components etc guest operating systems need compliant host hardware thus making possible run different operating systems computer eg windows linux prior versions operating system support future software use virtual machines support separate guest operating systems popular regard embedded systems typical use would run realtime operating system simultaneously preferred complex operating system linux windows another use would novel unproven software still developmental stage runs inside sandbox virtual machines advantages operating system development may include improved debugging access faster reboots multiple vms running guest operating system frequently engaged server consolidation process virtual machines process vm sometimes called application virtual machine managed runtime environment mre runs normal application inside host os supports single process created process started destroyed exits purpose provide platformindependent programming environment abstracts away details underlying hardware operating system allows program execute way platform process vm provides highlevel abstraction highlevel programming language compared lowlevel isa abstraction system vm process vms implemented using interpreter performance comparable compiled programming languages achieved use justintime compilation type vm become popular java programming language implemented using java virtual machine examples include parrot virtual machine net framework runs vm called common language runtime serve abstraction layer computer language special case process vms systems abstract communication mechanisms potentially heterogeneous computer cluster vm consist single process one process per physical machine cluster designed ease task programming concurrent applications letting programmer focus algorithms rather communication mechanisms provided interconnect os hide fact communication takes place attempt present cluster single machine unlike process vms systems provide specific programming language embedded existing language typically system provides bindings several languages eg c fortran examples parallel virtual machine pvm message passing interface mpi strictly virtual machines applications running top still access os services therefore confined system model full virtualization full virtualization virtual machine simulates enough hardware allow unmodified guest os one designed instruction set run isolation approach pioneered 1966 ibm cp40 cp67 predecessors vm family examples outside mainframe field include parallels workstation parallels desktop mac virtualbox virtual iron oracle vm virtual pc virtual server hyperv vmware workstation vmware server discontinued formerly called gsx server vmware esxi qemu adeos maconlinux win4bsd win4lin pro egenera vblade technology hardwareassisted virtualization hardwareassisted virtualization hardware provides architectural support facilitates building virtual machine monitor allows guest oses run isolation hardwareassisted virtualization first introduced ibm system370 1972 use vm370 first virtual machine operating system offered ibm official product 2005 2006 intel amd provided additional hardware support virtualization sun microsystems oracle corporation added similar features ultrasparc tseries processors 2005 examples virtualization platforms adapted hardware include kvm vmware workstation vmware fusion hyperv windows virtual pc xen parallels desktop mac oracle vm server sparc virtualbox parallels workstation 2006 firstgeneration 32 64bit x86 hardware support found rarely offer performance advantages software virtualization operatingsystemlevel virtualization operatingsystemlevel virtualization physical server virtualized operating system level enabling multiple isolated secure virtualized servers run single physical server guest operating system environments share running instance operating system host system thus operating system kernel also used implement guest environments applications running given guest environment view standalone system pioneer implementation freebsd jails examples include docker solaris containers openvz linuxvserver lxc aix workload partitions parallels virtuozzo containers icore virtual accounts realtime computing computer science realtime computing rtc reactive computing describes hardware software systems subject realtime constraint example event system response realtime programs must guarantee response within specified time constraints often referred deadlines correctness types systems depends temporal aspects well functional aspects realtime responses often understood order milliseconds sometimes microseconds system specified operating real time usually guarantee response within timeframe although typical expected response times may given realtime system described one controls environment receiving data processing returning results sufficiently quickly affect environment time term realtime also used simulation mean simulations clock runs speed real clock process control enterprise systems mean without significant delay realtime software may use one following synchronous programming languages realtime operating systems realtime networks provide essential frameworks build realtime software application systems used many mission critical applications must realtime control flybywire aircraft antilock brakes vehicle must produce maximum deceleration intermittently stop braking prevent skidding realtime processing fails completed within specified deadline relative event deadlines must always met regardless system load criteria realtime computing system said realtime total correctness operation depends upon logical correctness also upon time performed realtime systems well deadlines classified consequence missing deadline hard missing deadline total system failure firm infrequent deadline misses tolerable may degrade systems quality service usefulness result zero deadline soft usefulness result degrades deadline thereby degrading systems quality service thus goal hard realtime system ensure deadlines met soft realtime systems goal becomes meeting certain subset deadlines order optimize applicationspecific criteria particular criteria optimized depend application typical examples include maximizing number deadlines met minimizing lateness tasks maximizing number high priority tasks meeting deadlines hard realtime systems used imperative event reacted within strict deadline strong guarantees required systems reacting certain interval time would cause great loss manner especially damaging surroundings physically threatening human lives although strict definition simply missing deadline constitutes failure system example car engine control system hard realtime system delayed signal may cause engine failure damage examples hard realtime embedded systems include medical systems heart pacemakers industrial process controllers hard realtime systems typically found interacting low level physical hardware embedded systems early video game systems atari 2600 cinematronics vector graphics hard realtime requirements nature graphics timing hardware context multitasking systems scheduling policy normally priority driven preemptive schedulers scheduling algorithms include earliest deadline first ignoring overhead context switching sufficient system loads less 100 new overlay scheduling systems adaptive partition scheduler assist managing large systems mixture hard realtime non realtime applications soft realtime systems typically used solve issues concurrent access need keep number connected systems uptodate changing situations example software maintains updates flight plans commercial airliners flight plans must kept reasonably current operate latency seconds live audiovideo systems also usually soft realtime violation constraints results degraded quality system continue operate also recover future using workload prediction reconfiguration methodologies realtime digital signal processing realtime digital signal processing dsp process analyzed input generated output samples processed generated continuously time takes input output set samples independent processing delay means processing delay must bounded even processing continues unlimited time means mean processing time per sample including overhead greater sampling period reciprocal sampling rate criterion whether samples grouped together large segments processed blocks processed individually whether long short nonexistent input output buffers consider audio dsp example process requires 201 seconds analyze synthesize process 200 seconds sound realtime however takes 199 seconds made realtime dsp process common life analog standing line queue waiting checkout grocery store line asymptotically grows longer longer without bound checkout process realtime length line bounded customers processed output rapidly average inputted process realtime grocer might go business must least lose business make checkout process realtime thus fundamentally important process realtime signal processing algorithm keep flow input data output falling farther farther behind input realtime delay output relative input bounded regarding process operates unlimited time signal processing algorithm realtime even throughput delay may long live vs realtime realtime signal processing necessary sufficient live signal processing required live event support live audio digital signal processing requires realtime operation sufficient limit throughput delay tolerable performers using stage monitors inear monitors noticeable lip sync error audience also directly watching performers tolerable limits latency live realtime processing subject investigation debate estimated 6 20 milliseconds realtime bidirectional telecommunications delays less 300 ms round trip twice unidirectional delay considered acceptable avoid undesired talkover conversation realtime highperformance realtime computing sometimes misunderstood highperformance computing accurate classification example massive supercomputer executing scientific simulation may offer impressive performance yet executing realtime computation conversely hardware software antilock braking system designed meet required deadlines performance gains obligatory even useful furthermore network server highly loaded network traffic response time may slower cases still succeed times hits deadline hence network server would considered realtime system temporal failures delays timeouts etc typically small compartmentalized limited effect catastrophic failures realtime system ftse 100 index slowdown beyond limits would often considered catastrophic application context important requirement realtime system consistent output high throughput kinds software many chessplaying programs fall either category instance chess program designed play tournament clock need decide move certain deadline lose game therefore realtime computation chess program allowed run indefinitely moving cases however high performance desirable work tournament chess program allotted time better moves faster unconstrained chess program runs sooner able move example also illustrates essential difference realtime computations computations tournament chess program make decision next move allotted time loses gameie fails realtime computationwhile scenario meeting deadline assumed necessary highperformance indicative amount processing performed given amount time whereas realtime ability get done processing yield useful output available time near realtime term near realtime nearly realtime nrt telecommunications computing refers time delay introduced automated data processing network transmission occurrence event use processed data display feedback control purposes example nearrealtime display depicts event situation existed current time minus processing time nearly time live event distinction terms near real time real time somewhat nebulous must defined situation hand term implies significant delays many cases processing described realtime would accurately described near realtime near realtime also refers delayed realtime transmission voice video allows playing video images approximately realtime without wait entire large video file download incompatible databases exportimport common flat files database importexport scheduled basis syncshare common data near realtime distinction near realtime realtime varies delay dependent type speed transmission delay near realtime typically order several seconds several minutes design methods several methods exist aid design realtime systems example mascot old successful method represents concurrent structure system examples hood realtime uml aadl ravenscar profile realtime java embedded system embedded system controller dedicated function within larger mechanical electrical system often realtime computing constraints embedded part complete device often including hardware mechanical parts embedded systems control many devices common use today ninetyeight percent microprocessors manufactured used embedded systems modern embedded systems often based microcontrollers ie microprocessors integrated memory peripheral interfaces ordinary microprocessors using external chips memory peripheral interface circuits also common especially complex systems either case processors used may types ranging general purpose specialized certain class computations even custom designed application hand common standard class dedicated processors digital signal processor dsp since embedded system dedicated specific tasks design engineers optimize reduce size cost product increase reliability performance embedded systems massproduced benefiting economies scale embedded systems range portable devices digital watches mp3 players large stationary installations like traffic light controllers programmable logic controllers large complex systems like hybrid vehicles medical imaging systems avionics complexity varies low single microcontroller chip high multiple units peripherals networks mounted inside large equipment rack applications embedded systems commonly found consumer industrial automotive home appliances medical commercial military applications telecommunications systems employ numerous embedded systems telephone switches network cell phones end user computer networking uses dedicated routers network bridges route data consumer electronics include mp3 players mobile phones video game consoles digital cameras gps receivers printers household appliances microwave ovens washing machines dishwashers include embedded systems provide flexibility efficiency features advanced hvac systems use networked thermostats accurately efficiently control temperature change time day season home automation uses wired wirelessnetworking used control lights climate security audiovisual surveillance etc use embedded devices sensing controlling transportation systems flight automobiles increasingly use embedded systems new airplanes contain advanced avionics inertial guidance systems gps receivers also considerable safety requirements various electric motors brushless dc motors induction motors dc motors use electricelectronic motor controllers automobiles electric vehicles hybrid vehicles increasingly use embedded systems maximize efficiency reduce pollution automotive safety systems include antilock braking system abs electronic stability control escesp traction control tcs automatic fourwheel drive medical equipment uses embedded systems vital signs monitoring electronic stethoscopes amplifying sounds various medical imaging pet spect ct mri noninvasive internal inspections embedded systems within medical equipment often powered industrial computers embedded systems used transportation fire safety safety security medical applications life critical systems systems isolated hacking thus reliable unless connected wired wireless networks via onchip 3g cellular methods iot monitoring control purposes fire safety systems designed greater ability handle higher temperatures continue operate dealing security embedded systems selfsufficient able deal cut electrical communication systems new class miniature wireless devices called motes networked wireless sensors wireless sensor networking wsn makes use miniaturization made possible advanced ic design couple full wireless subsystems sophisticated sensors enabling people companies measure myriad things physical world act information monitoring control systems motes completely selfcontained typically run battery source years batteries need changed charged embedded wifi modules provide simple means wirelessly enabling device communicates via serial port characteristics embedded systems designed specific task rather generalpurpose computer multiple tasks also realtime performance constraints must met reasons safety usability others may low performance requirements allowing system hardware simplified reduce costs embedded systems always standalone devices many embedded systems consist small parts within larger device serves general purpose example gibson robot guitar features embedded system tuning strings overall purpose robot guitar course play music similarly embedded system automobile provides specific function subsystem car program instructions written embedded systems referred firmware stored readonly memory flash memory chips run limited computer hardware resources little memory small nonexistent keyboard screen user interface embedded systems range user interface systems dedicated one task complex graphical user interfaces resemble modern computer desktop operating systems simple embedded devices use buttons leds graphic character lcds hd44780 lcd example simple menu system sophisticated devices use graphical screen touch sensing screenedge buttons provide flexibility minimizing space used meaning buttons change screen selection involves natural behavior pointing desired handheld systems often screen joystick button pointing device systems provide user interface remotely help serial eg rs232 usb i²c etc network eg ethernet connection approach gives several advantages extends capabilities embedded system avoids cost display simplifies bsp allows one build rich user interface pc good example combination embedded web server running embedded device ip camera network router user interface displayed web browser pc connected device therefore needing software installed processors embedded systems examples properties typical embedded computers compared generalpurpose counterparts low power consumption small size rugged operating ranges low perunit cost comes price limited processing resources make significantly difficult program interact however building intelligence mechanisms top hardware taking advantage possible existing sensors existence network embedded units one optimally manage available resources unit network levels well provide augmented functions well beyond available example intelligent techniques designed manage power consumption embedded systems embedded processors broken two broad categories ordinary microprocessors μp use separate integrated circuits memory peripherals microcontrollers μc onchip peripherals thus reducing power consumption size cost contrast personal computer market many different basic cpu architectures used since software customdeveloped application commodity product installed end user von neumann well various degrees harvard architectures used risc well nonrisc processors found word lengths vary 4bit 64bits beyond although typical remain 816bit architectures come large number different variants shapes many also manufactured several different companies numerous microcontrollers developed embedded systems use generalpurpose microprocessors also used embedded systems generally require support circuitry microcontrollers readymade computer boards pc104 pc104 examples standards readymade computer boards intended small lowvolume embedded ruggedized systems mostly x86based often physically small compared standard pc although still quite large compared simple 816bit embedded systems often use dos linux netbsd embedded realtime operating system microcosii qnx vxworks sometimes boards use nonx86 processors certain applications small size power efficiency primary concerns components used may compatible used general purpose x86 personal computers boards via epia range help bridge gap pccompatible highly integrated physically smaller attributes making attractive embedded engineers advantage approach lowcost commodity components may used along software development tools used general software development systems built way still regarded embedded since integrated larger devices fulfill single role examples devices may adopt approach atms arcade machines contain code specific application however readymade embedded systems boards pccentered use isa pci buses systemonachip processor involved may little benefit standardized bus connecting discrete components environment hardware software tools may different one common design style uses small system module perhaps size business card holding high density bga chips armbased systemonachip processor peripherals external flash memory storage dram runtime memory module vendor usually provide boot software make sure selection operating systems usually including linux real time choices modules manufactured high volume organizations familiar specialized testing issues combined much lower volume custom mainboards applicationspecific external peripherals implementation embedded systems advanced easily implemented alreadymade boards based worldwide accepted platforms platforms include limited arduino raspberry pi asic fpga solutions common array veryhighvolume embedded systems system chip soc contains complete system consisting multiple processors multipliers caches interfaces single chip socs implemented applicationspecific integrated circuit asic using fieldprogrammable gate array fpga peripherals embedded systems talk outside world via peripherals serial communication interfaces sci rs232 rs422 rs485 etc synchronous serial communication interface i2c spi ssc essi enhanced synchronous serial interface universal serial bus usb multi media cards sd cards compact flash etc networks ethernet lonworks etc fieldbuses canbus linbus profibus etc timers plls capturecompare time processing units discrete io aka general purpose inputoutput gpio analog digitaldigital analog adcdac debugging jtag isp bdm port bitp db9 ports tools software embedded system designers use compilers assemblers debuggers develop embedded system software however may also use specific tools circuit debuggers emulators see next section utilities add checksum crc program embedded system check program valid systems using digital signal processing developers may use math workbench simulate mathematics system level modeling simulation tools help designers construct simulation models system hardware components processors memories dma interfaces buses software behavior flow state diagram flow diagram using configurable library blocks simulation conducted select right components performing power vs performance tradeoff reliability analysis bottleneck analysis typical reports helps designer make architecture decisions includes application latency device throughput device utilization power consumption full system well devicelevel power consumption modelbased development tool creates simulate graphical data flow uml state chart diagrams components like digital filters motor controllers communication protocol decoding multirate tasks custom compilers linkers may used optimize specialized hardware embedded system may special language design tool add enhancements existing language forth basic another alternative add realtime operating system embedded operating system modeling code generating tools often based state machines software tools come several sources software companies specialize embedded market ported gnu software development tools sometimes development tools personal computer used embedded processor close relative common pc processor complexity embedded systems grows higher level tools operating systems migrating machinery makes sense example cellphones personal digital assistants consumer computers often need significant software purchased provided person manufacturer electronics systems open programming environment linux netbsd osgi embedded java required thirdparty software provider sell large market embedded systems commonly found consumer cooking industrial automotive medical applications examples embedded systems mp3 players mobile phones video game consoles digital cameras dvd players gps household appliances microwave ovens washing machines dishwashers include embedded systems provide flexibility efficiency debugging embedded debugging may performed different levels depending facilities available different metrics characterize different forms embedded debugging slow main application close debugged system application actual system application expressive triggers set debugging eg inspecting memory particular program counter value reached inspected debugging process memory memory registers etc simplest sophisticated roughly grouped following areas interactive resident debugging using simple shell provided embedded operating system eg forth basic external debugging using logging serial port output trace operation using either monitor flash using debug server like remedy debugger even works heterogeneous multicore systems incircuit debugger icd hardware device connects microprocessor via jtag nexus interface allows operation microprocessor controlled externally typically restricted specific debugging capabilities processor incircuit emulator ice replaces microprocessor simulated equivalent providing full control aspects microprocessor complete emulator provides simulation aspects hardware allowing controlled modified allowing debugging normal pc downsides expense slow operation cases 100 times slower final system soc designs typical approach verify debug design fpga prototype board tools certus used insert probes fpga rtl make signals available observation used debug hardware firmware software interactions across multiple fpga capabilities similar logic analyzer softwareonly debuggers benefit need hardware modification carefully control record order conserve time storage space unless restricted external debugging programmer typically load run software tools view code running processor start stop operation view code may hll sourcecode assembly code mixture embedded system often composed wide variety elements debugging strategy may vary instance debugging software microprocessor centric embedded system different debugging embedded system processing performed peripherals dsp fpga coprocessor increasing number embedded systems today use one single processor core common problem multicore development proper synchronization software execution case embedded system design may wish check data traffic buses processor cores requires lowlevel debugging signalbus level logic analyzer instance tracing realtime operating systems rtos often supports tracing operating system events graphical view presented host pc tool based recording system behavior trace recording performed software rtos special tracing hardware rtos tracing allows developers understand timing performance issues software system gives good understanding highlevel system behaviors reliability embedded systems often reside machines expected run continuously years without errors cases recover error occurs therefore software usually developed tested carefully personal computers unreliable mechanical moving parts disk drives switches buttons avoided specific reliability issues may include system safely shut repair inaccessible repair examples include space systems undersea cables navigational beacons borehole systems automobiles system must kept running safety reasons limp modes less tolerable often backups selected operator examples include aircraft navigation reactor control systems safetycritical chemical factory controls train signals system lose large amounts money shut telephone switches factory controls bridge elevator controls funds transfer market making automated sales service variety techniques used sometimes combination recover errorsboth software bugs memory leaks also soft errors hardware watchdog timer resets computer unless software periodically notifies watchdog subsystems redundant spares switched software limp modes provide partial function designing trusted computing base tcb architecture ensures highly secure reliable system environment hypervisor designed embedded systems able provide secure encapsulation subsystem component compromised software component interfere subsystems privilegedlevel system software encapsulation keeps faults propagating one subsystem another thereby improving reliability may also allow subsystem automatically shut restarted fault detection immunity aware programming high vs low volume high volume systems portable music players mobile phones minimizing cost usually primary design consideration engineers typically select hardware good enough implement necessary functions lowvolume prototype embedded systems general purpose computers may adapted limiting programs replacing operating system realtime operating system embedded software architectures several different types software architecture common use simple control loop design software simply loop loop calls subroutines manages part hardware software hence called simple control loop control loop interruptcontrolled system embedded systems predominantly controlled interrupts means tasks performed system triggered different kinds events interrupt could generated example timer predefined frequency serial port controller receiving byte kinds systems used event handlers need low latency event handlers short simple usually kinds systems run simple task main loop also task sensitive unexpected delays sometimes interrupt handler add longer tasks queue structure later interrupt handler finished tasks executed main loop method brings system close multitasking kernel discrete processes cooperative multitasking nonpreemptive multitasking system similar simple control loop scheme except loop hidden api programmer defines series tasks task gets environment run task idle calls idle routine usually called pause wait yield nop stands operation etc advantages disadvantages similar control loop except adding new software easier simply writing new task adding queue preemptive multitasking multithreading type system lowlevel piece code switches tasks threads based timer connected interrupt level system generally considered operating system kernel depending much functionality required introduces less complexities managing multiple tasks running conceptually parallel code potentially damage data another task except larger systems using mmu programs must carefully designed tested access shared data must controlled synchronization strategy message queues semaphores nonblocking synchronization scheme complexities common organizations use realtime operating system rtos allowing application programmers concentrate device functionality rather operating system services least large systems smaller systems often afford overhead associated generic realtime system due limitations regarding memory size performance battery life choice rtos required brings issues however selection must done prior starting application development process timing forces developers choose embedded operating system device based upon current requirements restricts future options large extent restriction future options becomes issue product life decreases additionally level complexity continuously growing devices required manage variables serial usb tcpip bluetooth wireless lan trunk radio multiple channels data voice enhanced graphics multiple states multiple threads numerous wait states trends leading uptake embedded middleware addition realtime operating system microkernels exokernels microkernel logical step realtime os usual arrangement operating system kernel allocates memory switches cpu different threads execution user mode processes implement major functions file systems network interfaces etc general microkernels succeed task switching intertask communication fast fail slow exokernels communicate efficiently normal subroutine calls hardware software system available extensible application programmers monolithic kernels case relatively large kernel sophisticated capabilities adapted suit embedded environment gives programmers environment similar desktop operating system like linux microsoft windows therefore productive development downside requires considerably hardware resources often expensive complexity kernels less predictable reliable common examples embedded monolithic kernels embedded linux vxworks windows ce despite increased cost hardware type embedded system increasing popularity especially powerful embedded devices wireless routers gps navigation systems reasons ports common embedded chip sets available permit reuse publicly available code device drivers web servers firewalls code development systems start broad featuresets distribution configured exclude unneeded functionality save expense memory would consume many engineers believe running application code user mode reliable easier debug thus making development process easier code portable features requiring faster response guaranteed often placed hardware additional software components addition core operating system many embedded systems additional upperlayer software components components consist networking protocol stacks like tcpip ftp http https also included storage capabilities like fat flash memory management systems embedded device audio video capabilities appropriate drivers codecs present system case monolithic kernels many software layers included rtos category availability additional software components depends upon commercial offering domainspecific architectures automotive sector autosar standard architecture embedded software network scheduler network scheduler also called packet scheduler queueing discipline qdisc queueing algorithm arbiter node packet switching communication network manages sequence network packets transmit receive queues network interface controller several network schedulers available different operating systems implement many existing network scheduling algorithms network scheduler logic decides network packet forward next network scheduler associated queuing system storing network packets temporarily transmitted systems may single multiple queues case may hold packets one flow classification priority cases may possible schedule transmissions within constraints system cases network scheduler responsible deciding traffic forward gets dropped terminology responsibilities network scheduler may responsibility implementation specific network traffic control initiatives network traffic control umbrella term measures aimed reducing congest latency packet loss specifically active queue management aqm selective dropping queued network packets achieve larger goal preventing excessive network congestion scheduler must choose packets drop traffic shaping smooths bandwidth requirements traffic flows delaying transmission packets queued bursts scheduler decides timing transmitted packets quality service qos prioritization traffic based service class differentiated services reserved connection integrated services algorithms course time many network queueing disciplines developed provides specific reordering dropping network packets inside various transmit receive buffers queuing disciplines commonly used attempts compensate various networking conditions like reducing latency certain classes network packets generally used part qos measures examples algorithms suitable managing network traffic include several implemented linux kernel modules freely available bufferbloat bufferbloat phenomenon packetswitched networks excess buffering packets causes high latency packet delay variation bufferbloat addressed network scheduler strategically discards packets avoid unnecessarily high buffering backlog examples include codel random early detection implementations linux kernel linux kernel packet scheduler integral part linux kernels network stack manages transmit receive ring buffers nics working layer 2 osi model handling ethernet frames example packet scheduler configured using utility called tc short traffic control default queuing discipline packet scheduler uses fifo implementation called pfifo_fast although systemd since version 217 changes default queuing discipline fq_codel ifconfig ip utilities enable system administrators configure buffer sizes txqueuelen rxqueuelen device separately terms number ethernet frames regardless size linux kernels network stack contains several buffers managed network scheduler berkeley packet filter filters attached packet schedulers classifiers ebpf functionality brought version 41 linux kernel 2015 extends classic bpf programmable classifiers ebpf compiled using llvm ebpf backend loaded running kernel using tc utility bsd openbsd altq implementation network scheduler bsds openbsd version 55 altq replaced hfsc scheduler dependability systems engineering dependability measure systems availability reliability maintainability maintenance support performance cases characteristics durability safety security software engineering dependability ability provide services defensibly trusted within timeperiod may also encompass mechanisms designed increase maintain dependability system software international electrotechnical commission iec via technical committee tc 56 develops maintains international standards provide systematic methods tools dependability assessment management equipment services systems throughout life cycles dependability broken three elements attributes way assess dependability system threats understanding things affect dependability system means ways increase systems dependability elements dependability attributes attributes qualities system assessed determine overall dependability using qualitative quantitative measures avizienis et al define following dependability attributes availability readiness correct service reliability continuity correct service safety absence catastrophic consequences users environment integrity absence improper system alteration maintainability ability easy maintenance repair definitions suggested availability reliability quantifiable direct measurements whilst others subjective instance safety measured directly via metrics subjective assessment requires judgmental information applied give level confidence whilst reliability measured failures time confidentiality ie absence unauthorized disclosure information also used addressing security security composite confidentiality integrity availability security sometimes classed attribute current view aggregate together dependability treat dependability composite term called dependability security practically applying security measures appliances system generally improves dependability limiting number externally originated errors threats threats things affect system cause drop dependability three main terms must clearly understood fault fault usually referred bug historic reasons defect system presence fault system may may lead failure instance although system may contain fault input state conditions may never cause fault executed error occurs thus particular fault never exhibits failure error error discrepancy intended behaviour system actual behaviour inside system boundary errors occur runtime part system enters unexpected state due activation fault since errors generated invalid states hard observe without special mechanisms debuggers debug output logs failure failure instance time system displays behaviour contrary specification error may necessarily cause failure instance exception may thrown system may caught handled using fault tolerance techniques overall operation system conform specification important note failures recorded system boundary basically errors propagated system boundary become observable faults errors failures operate according mechanism mechanism sometimes known faulterrorfailure chain general rule fault activated lead error invalid state invalid state generated error may lead another error failure observable deviation specified behaviour system boundary fault activated error created error may act way fault create error conditions therefore error may propagate multiple times within system boundary without causing observable failure error propagates outside system boundary failure said occur failure basically point said service failing meet specification since output data one service may fed another failure one service may propagate another service fault chain formed form fault leading error leading failure leading error etc means since mechanism faulterrorchain understood possible construct means break chains thereby increase dependability system four means identified far prevention removal forecasting tolerance fault prevention deals preventing faults incorporated system accomplished use development methodologies good implementation techniques fault removal subdivided two subcategories removal development removal use removal development requires verification faults detected removed system put production systems put production system needed record failures remove via maintenance cycle fault forecasting predicts likely faults removed effects circumvented fault tolerance deals putting mechanisms place allow system still deliver required service presence faults although service may degraded level dependability means intended reduce number failures presented user system failures traditionally recorded time useful understand frequency measured effectiveness means assessed11 operating system operating system os system software manages computer hardware software resources provides common services computer programs timesharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources hardware functions input output memory allocation operating system acts intermediary programs computer hardware although application code usually executed directly hardware frequently makes system calls os function interrupted operating systems found many devices contain computer cellular phones video game consoles web servers supercomputers dominant desktop operating system microsoft windows market share around 8274 macos apple inc second place 1323 varieties linux collectively third place 157 mobile including smartphones tablets sector google androids share 70 year 2017 according third quarter 2016 data androids share smartphones dominant 875 percent also growth rate 103 percent per year followed apples ios 121 percent per year decrease market share 52 percent operating systems amount 03 percent linux distributions dominant server supercomputing sectors specialized classes operating systems embedded realtime systems exist many applications types operating systems singletasking multitasking singletasking system run one program time multitasking operating system allows one program running concurrency achieved timesharing available processor time divided multiple processes processes interrupted repeatedly time slices taskscheduling subsystem operating system multitasking may characterized preemptive cooperative types preemptive multitasking operating system slices cpu time dedicates slot programs unixlike operating systems solaris linuxas well nonunixlike amigaossupport preemptive multitasking cooperative multitasking achieved relying process provide time processes defined manner 16bit versions microsoft windows used cooperative multitasking 32bit versions windows nt win9x used preemptive multitasking single multiuser singleuser operating systems facilities distinguish users may allow multiple programs run tandem multiuser operating system extends basic concept multitasking facilities identify processes resources disk space belonging multiple users system permits multiple users interact system time timesharing operating systems schedule tasks efficient use system may also include accounting software cost allocation processor time mass storage printing resources multiple users distributed distributed operating system manages group distinct computers makes appear single computer development networked computers could linked communicate gave rise distributed computing distributed computations carried one machine computers group work cooperation form distributed system templated os distributed cloud computing context templating refers creating single virtual machine image guest operating system saving tool multiple running virtual machines technique used virtualization cloud computing management common large server warehouses embedded embedded operating systems designed used embedded computer systems designed operate small machines like pdas less autonomy able operate limited number resources compact extremely efficient design windows ce minix 3 examples embedded operating systems realtime realtime operating system operating system guarantees process events data specific moment time realtime operating system may single multitasking multitasking uses specialized scheduling algorithms deterministic nature behavior achieved eventdriven system switches tasks based priorities external events timesharing operating systems switch tasks based clock interrupts library library operating system one services typical operating system provides networking provided form libraries composed application configuration code construct unikernel specialized single address space machine image deployed cloud embedded environments examples unix unixlike operating systems unix originally written assembly language ken thompson wrote b mainly based bcpl based experience multics project b replaced c unix rewritten c developed large complex family interrelated operating systems influential every modern operating system see history unixlike family diverse group operating systems several major subcategories including system v bsd linux name unix trademark open group licenses use operating system shown conform definitions unixlike commonly used refer large set operating systems resemble original unix unixlike systems run wide variety computer architectures used heavily servers business well workstations academic engineering environments free unix variants linux bsd popular areas four operating systems certified open group holder unix trademark unix hps hpux ibms aix descendants original system v unix designed run respective vendors hardware contrast sun microsystemss solaris run multiple types hardware including x86 sparc servers pcs apples macos replacement apples earlier nonunix mac os hybrid kernelbased bsd variant derived nextstep mach freebsd unix interoperability sought establishing posix standard posix standard applied operating system although originally created various unix variants bsd descendants subgroup unix family berkeley software distribution family includes freebsd netbsd openbsd operating systems commonly found webservers although also function personal computer os internet owes much existence bsd many protocols commonly used computers connect send receive data network widely implemented refined bsd world wide web also first demonstrated number computers running os based bsd called nextstep 1974 university california berkeley installed first unix system time students staff computer science department began adding new programs make things easier text editors berkeley received new vax computers 1978 unix installed schools undergraduates modified unix even order take advantage computers hardware possibilities defense advanced research projects agency us department defense took interest decided fund project many schools corporations government organizations took notice started use berkeleys version unix instead official one distributed att steve jobs upon leaving apple inc 1985 formed next inc company manufactured highend computers running variation bsd called nextstep one computers used tim bernerslee first webserver create world wide web developers like keith bostic encouraged project replace nonfree code originated bell labs done however att sued two years legal disputes bsd project spawned number free derivatives netbsd freebsd 1993 openbsd netbsd 1995 macos macos formerly mac os x later os x line open core graphical operating systems developed marketed sold apple inc latest preloaded currently shipping macintosh computers macos successor original classic mac os apples primary operating system since 1984 unlike predecessor macos unix operating system built technology developed next second half 1980s apple purchased company early 1997 operating system first released 1999 mac os x server 10 followed march 2001 client version mac os x v100 cheetah since six distinct client server editions macos released two merged os x 107 lion prior merging macos server edition macos server architecturally identical desktop counterpart usually ran apples line macintosh server hardware macos server included work group management administration software tools provide simplified access key network services including mail transfer agent samba server ldap server domain name server others mac os x v107 lion server aspects mac os x server integrated client version product rebranded os x dropping mac name server tools offered application linux linux kernel originated 1991 project linus torvalds university student finland posted information project newsgroup computer students programmers received support assistance volunteers succeeded creating complete functional kernel linux unixlike developed without unix code unlike bsd variants open license model linux kernel code available study modification resulted use wide range computing machinery supercomputers smartwatches although estimates suggest linux used 182 desktop laptop pcs widely adopted use servers embedded systems cell phones linux superseded unix many platforms used supercomputers including top 385 many computers also green500 different order linux runs top 10 linux also commonly used small energyefficient computers smartphones smartwatches linux kernel used popular distributions red hat debian ubuntu linux mint googles android chrome os chromium os microsoft windows microsoft windows family proprietary operating systems designed microsoft corporation primarily targeted intel architecture based computers estimated 889 percent total usage share web connected computers latest version windows 10 2011 windows 7 overtook windows xp common version use microsoft windows first released 1985 operating environment running top msdos standard operating system shipped intel architecture personal computers time 1995 windows 95 released used msdos bootstrap backwards compatibility win9x could run realmode msdos 16bit windows 3x drivers windows released 2000 last version win9x family later versions based windows nt kernel current client versions windows run ia32 x8664 32bit arm microprocessors addition itanium still supported older server version windows server 2008 r2 past windows nt supported additional architectures server editions windows widely used recent years microsoft expended significant capital effort promote use windows server operating system however windows usage servers widespread personal computers windows competes linux bsd server market share reactos windowsalternative operating system developed principles windows without using microsofts code many operating systems significant day longer amigaos os2 ibm microsoft classic mac os nonunix precursor apples macos beos xts300 risc os morphos haiku baremetal freemint still used niche markets continue developed minority platforms enthusiast communities specialist applications openvms formerly dec still active development hewlettpackard yet operating systems used almost exclusively academia operating systems education research operating system concepts typical example system fulfills roles minix example singularity used purely research another example oberon system designed eth zürich niklaus wirth jürg gutknecht group students former computer systems institute 1980s used mainly research teaching daily work wirths group operating systems failed win significant market share introduced innovations influenced mainstream operating systems least bell labs plan 9 components components operating system exist order make different parts computer work together user software needs go operating system order use hardware whether simple mouse keyboard complex internet component kernel aid firmware device drivers kernel provides basic level control computers hardware devices manages memory access programs ram determines programs get access hardware resources sets resets cpus operating states optimal operation times organizes data longterm nonvolatile storage file systems media disks tapes flash memory etc program execution operating system provides interface application program computer hardware application program interact hardware obeying rules procedures programmed operating system operating system also set services simplify development execution application programs executing application program involves creation process operating system kernel assigns memory space resources establishes priority process multitasking systems loads program binary code memory initiates execution application program interacts user hardware devices interrupts interrupts central operating systems provide efficient way operating system interact react environment alternative operating system watch various sources input events polling require action found older systems small stacks 50 60 bytes unusual modern systems large stacks interruptbased programming directly supported modern cpus interrupts provide computer way automatically saving local register contexts running specific code response events even basic computers support hardware interrupts allow programmer specify code may run event takes place interrupt received computers hardware automatically suspends whatever program currently running saves status runs computer code previously associated interrupt analogous placing bookmark book response phone call modern operating systems interrupts handled operating systems kernel interrupts may come either computers hardware running program hardware device triggers interrupt operating systems kernel decides deal event generally running processing code amount code run depends priority interrupt example person usually responds smoke detector alarm answering phone processing hardware interrupts task usually delegated software called device driver may part operating systems kernel part another program device drivers may relay information running program various means program may also trigger interrupt operating system program wishes access hardware example may interrupt operating systems kernel causes control passed back kernel kernel processes request program wishes additional resources wishes shed resources memory triggers interrupt get kernels attention modes modern microprocessors cpu mpu support multiple modes operation cpus capability offer least two modes user mode supervisor mode general terms supervisor mode operation allows unrestricted access machine resources including mpu instructions user mode operation sets limits instruction use typically disallows direct access machine resources cpus might modes similar user mode well virtual modes order emulate older processor types 16bit processors 32bit one 32bit processors 64bit one poweron reset system begins supervisor mode operating system kernel loaded started boundary user mode supervisor mode also known kernel mode established supervisor mode used kernel low level tasks need unrestricted access hardware controlling memory accessed communicating devices disk drives video display devices user mode contrast used almost everything else application programs word processors database managers operate within user mode access machine resources turning control kernel process causes switch supervisor mode typically transfer control kernel achieved executing software interrupt instruction motorola 68000 trap instruction software interrupt causes microprocessor switch user mode supervisor mode begin executing code allows kernel take control user mode programs usually access restricted set microprocessor instructions generally execute instructions could potentially cause disruption systems operation supervisor mode instruction execution restrictions typically removed allowing kernel unrestricted access machine resources term user mode resource generally refers one cpu registers contain information running program isnt allowed alter attempts alter resources generally causes switch supervisor mode operating system deal illegal operation program attempting example forcibly terminating killing program memory management among things multiprogramming operating system kernel must responsible managing system memory currently use programs ensures program interfere memory already use another program since programs time share program must independent access memory cooperative memory management used many early operating systems assumes programs make voluntary use kernels memory manager exceed allocated memory system memory management almost never seen since programs often contain bugs cause exceed allocated memory program fails may cause memory used one programs affected overwritten malicious programs viruses may purposefully alter another programs memory may affect operation operating system cooperative memory management takes one misbehaved program crash system memory protection enables kernel limit process access computers memory various methods memory protection exist including memory segmentation paging methods require level hardware support 80286 mmu doesnt exist computers segmentation paging certain protected mode registers specify cpu memory address allow running program access attempts access addresses trigger interrupt cause cpu reenter supervisor mode placing kernel charge called segmentation violation segv short since difficult assign meaningful result operation usually sign misbehaving program kernel generally resorts terminating offending program reports error windows versions 31 level memory protection programs could easily circumvent need use general protection fault would produced indicating segmentation violation occurred however system would often crash anyway virtual memory use virtual memory addressing paging segmentation means kernel choose memory program may use given time allowing operating system use memory locations multiple tasks program tries access memory isnt current range accessible memory nonetheless allocated kernel interrupted way would program exceed allocated memory see section memory management unix kind interrupt referred page fault kernel detects page fault generally adjusts virtual memory range program triggered granting access memory requested gives kernel discretionary power particular applications memory stored even whether actually allocated yet modern operating systems memory accessed less frequently temporarily stored disk media make space available use programs called swapping area memory used multiple programs memory area contains swapped exchanged demand virtual memory provides programmer user perception much larger amount ram computer really multitasking multitasking refers running multiple independent computer programs computer giving appearance performing tasks time since computers one two things one time generally done via timesharing means program uses share computers time execute operating system kernel contains scheduling program determines much time process spends executing order execution control passed programs control passed process kernel allows program access cpu memory later control returned kernel mechanism another program may allowed use cpu socalled passing control kernel applications called context switch early model governed allocation time programs called cooperative multitasking model control passed program kernel may execute long wants explicitly returning control kernel means malicious malfunctioning program may prevent programs using cpu hang entire system enters infinite loop modern operating systems extend concepts application preemption device drivers kernel code operating system preemptive control internal runtimes well philosophy governing preemptive multitasking ensuring programs given regular time cpu implies programs must limited much time allowed spend cpu without interrupted accomplish modern operating system kernels make use timed interrupt protected mode timer set kernel triggers return supervisor mode specified time elapsed see sections interrupts dual mode operation many single user operating systems cooperative multitasking perfectly adequate home computers generally run small number well tested programs amigaos exception preemptive multitasking first version windows nt first version microsoft windows enforced preemptive multitasking didnt reach home user market windows xp since windows nt targeted professionals disk access file systems access data stored disks central feature operating systems computers store data disks using files structured specific ways order allow faster access higher reliability make better use drives available space specific way files stored disk called file system enables files names attributes also allows stored hierarchy directories folders arranged directory tree early operating systems generally supported single type disk drive one kind file system early file systems limited capacity speed kinds file names directory structures could use limitations often reflected limitations operating systems designed making difficult operating system support one file system many simpler operating systems support limited range options accessing storage systems operating systems like unix linux support technology known virtual file system vfs operating system unix supports wide array storage devices regardless design file systems allowing accessed common application programming interface api makes unnecessary programs knowledge device accessing vfs allows operating system provide programs access unlimited number devices infinite variety file systems installed use specific device drivers file system drivers connected storage device hard drive accessed device driver device driver understands specific language drive able translate language standard language used operating system access disk drives unix language block devices kernel appropriate device driver place access contents disk drive raw format may contain one file systems file system driver used translate commands used access specific file system standard set commands operating system use talk file systems programs deal file systems basis filenames directoriesfolders contained within hierarchical structure create delete open close files well gather various information including access permissions size free space creation modification dates various differences file systems make supporting file systems difficult allowed characters file names case sensitivity presence various kinds file attributes makes implementation single interface every file system daunting task operating systems tend recommend using support natively file systems specifically designed example ntfs windows ext3 reiserfs linux however practice third party drivers usually available give support widely used file systems generalpurpose operating systems example ntfs available linux ntfs3g ext23 reiserfs available windows thirdparty software support file systems highly varied among modern operating systems although several common file systems almost operating systems include support drivers operating systems vary file system support disk formats may installed windows file system usually limited application certain media example cds must use iso 9660 udf windows vista ntfs file system operating system installed possible install linux onto many types file systems unlike operating systems linux unix allow file system used regardless media stored whether hard drive disc cd dvd usb flash drive even contained within file located another file system device drivers device driver specific type computer software developed allow interaction hardware devices typically constitutes interface communicating device specific computer bus communications subsystem hardware connected providing commands andor receiving data device end requisite interfaces operating system software applications specialized hardwaredependent computer program also operating system specific enables another program typically operating system applications software package computer program running operating system kernel interact transparently hardware device usually provides requisite interrupt handling necessary necessary asynchronous timedependent hardware interfacing needs key design goal device drivers abstraction every model hardware even within class device different newer models also released manufacturers provide reliable better performance newer models often controlled differently computers operating systems expected know control every device future solve problem operating systems essentially dictate every type device controlled function device driver translate operating system mandated function calls device specific calls theory new device controlled new manner function correctly suitable driver available new driver ensures device appears operate usual operating systems point view versions windows vista versions linux 26 driver execution cooperative meaning driver entered infinite loop would freeze system recent revisions operating systems incorporate kernel preemption kernel interrupts driver give tasks separates process receives response device driver gives tasks networking currently operating systems support variety networking protocols hardware applications using means computers running dissimilar operating systems participate common network sharing resources computing files printers scanners using either wired wireless connections networks essentially allow computers operating system access resources remote computer support functions could resources connected directly local computer includes everything simple communication using networked file systems even sharing another computers graphics sound hardware network services allow resources computer accessed transparently ssh allows networked users direct access computers command line interface clientserver networking allows program computer called client connect via network another computer called server servers offer host various services network computers users services usually provided ports numbered access points beyond servers ip address port number usually associated maximum one running program responsible handling requests port daemon user program turn access local hardware resources computer passing requests operating system kernel many operating systems support one vendorspecific open networking protocols well example sna ibm systems decnet systems digital equipment corporation microsoftspecific protocols smb windows specific protocols specific tasks may also supported nfs file access protocols like esound esd easily extended network provide sound local applications remote systems sound hardware security computer secure depends number technologies working properly modern operating system provides access number resources available software running system external devices like networks via kernel operating system must capable distinguishing requests allowed processed others processed systems may simply distinguish privileged nonprivileged systems commonly form requester identity user name establish identity may process authentication often username must quoted username may password methods authentication magnetic cards biometric data might used instead cases especially connections network resources may accessed authentication reading files network share also covered concept requester identity authorization particular services resources accessible requester logged system tied either requesters user account variously configured groups users requester belongs addition allow disallow model security system high level security also offers auditing options would allow tracking requests access resources reading file internal security security already running program possible possibly harmful requests must carried interrupts operating system kernel programs directly access hardware resources secured external security involves request outside computer login connected console kind network connection external requests often passed device drivers operating systems kernel passed onto applications carried directly security operating systems long concern highly sensitive data held computers commercial military nature united states government department defense dod created trusted computer system evaluation criteria tcsec standard sets basic requirements assessing effectiveness security became vital importance operating system makers tcsec used evaluate classify select trusted operating systems considered processing storage retrieval sensitive classified information network services include offerings file sharing print services email web sites file transfer protocols ftp compromised security front line security hardware devices known firewalls intrusion detectionprevention systems operating system level number software firewalls available well intrusion detectionprevention systems modern operating systems include software firewall enabled default software firewall configured allow deny network traffic service application running operating system therefore one install running insecure service telnet ftp threatened security breach firewall would deny traffic trying connect service port alternative strategy sandbox strategy available systems meet popek goldberg virtualization requirements operating system running user programs native code instead either emulates processor provides host pcode based system java internal security especially relevant multiuser systems allows user system private files users tamper read internal security also vital auditing use since program potentially bypass operating system inclusive bypassing auditing user interface every computer operated individual requires user interface user interface usually referred shell essential human interaction supported user interface views directory structure requests services operating system acquire data input hardware devices keyboard mouse credit card reader requests operating system services display prompts status messages output hardware devices video monitor printer two common forms user interface historically commandline interface computer commands typed linebyline graphical user interface visual environment commonly wimp present graphical user interfaces modern computer systems support graphical user interfaces gui often include computer systems original implementation classic mac os gui integrated kernel technically graphical user interface operating system service incorporating support one operating system kernel allow gui responsive reducing number context switches required gui perform output functions operating systems modular separating graphics subsystem kernel operating system 1980s unix vms many others operating systems built way linux macos also built way modern releases microsoft windows windows vista implement graphics subsystem mostly userspace however graphics drawing routines versions windows nt 40 windows server 2003 exist mostly kernel space windows 9x little distinction interface kernel many computer operating systems allow user install create user interface desire x window system conjunction gnome kde plasma 5 commonly found setup unix unixlike bsd linux solaris systems number windows shell replacements released microsoft windows offer alternatives included windows shell shell separated windows numerous unixbased guis existed time derived x11 competition among various vendors unix hp ibm sun led much fragmentation though effort standardize 1990s cose cde failed various reasons eventually eclipsed widespread adoption gnome k desktop environment prior free softwarebased toolkits desktop environments motif prevalent toolkitdesktop combination basis upon cde developed graphical user interfaces evolve time example windows modified user interface almost every time new major version windows released mac os gui changed dramatically introduction mac os x 1999 realtime operating systems realtime operating system rtos operating system intended applications fixed deadlines realtime computing applications include small embedded systems automobile engine controllers industrial robots spacecraft industrial control largescale computing systems early example largescale realtime operating system transaction processing facility developed american airlines ibm sabre airline reservations system embedded systems fixed deadlines use realtime operating system vxworks pikeos ecos qnx montavista linux rtlinux windows ce realtime operating system shares similar apis desktop windows shares none desktop windows codebase symbian os also rtos kernel eka2 starting version 80b embedded systems use operating systems palm os bsd linux although operating systems support realtime computing diversity operating systems portability application software generally written use specific operating system sometimes even specific hardware porting application run another os functionality required application may implemented differently os names functions meaning arguments etc requiring application adapted changed otherwise maintained unix first operating system written assembly language making portable systems different native pdp11 cost supporting operating systems diversity avoided instead writing applications software platforms java qt abstractions already borne cost adaptation specific operating systems system libraries another approach operating system vendors adopt standards example posix os abstraction layers provide commonalities reduce porting costs interpreter computing computer science interpreter computer program directly executes instructions written programming scripting language without requiring previously compiled machine language program interpreter generally uses one following strategies program execution parse source code perform behavior directly translate source code efficient intermediate representation immediately execute explicitly execute stored precompiled code made compiler part interpreter system early versions lisp programming language dartmouth basic would examples first type perl python matlab ruby examples second ucsd pascal example third type source programs compiled ahead time stored machine independent code linked runtime executed interpreter andor compiler jit systems systems smalltalk contemporary versions basic java may also combine two three interpreters various types also constructed many languages traditionally associated compilation algol fortran cobol cc interpretation compilation two main means programming languages implemented mutually exclusive interpreting systems also perform translation work like compilers terms interpreted language compiled language signify canonical implementation language interpreter compiler respectively high level language ideally abstraction independent particular implementations compilers versus interpreters programs written high level language either directly executed kind interpreter converted machine code compiler assembler linker cpu execute compilers assemblers generally produce machine code directly executable computer hardware often optionally produce intermediate form called object code basically machine specific code augmented symbol table names tags make executable blocks modules identifiable relocatable compiled programs typically use building blocks functions kept library object code modules linker used combine premade library files object files application form single executable file object files used generate executable file thus often produced different times sometimes even different languages capable generating object format simple interpreter written low level language eg assembly may similar machine code blocks implementing functions high level language stored executed functions entry look table points code however interpreter written high level language typically uses another approach generating walking parse tree generating executing intermediate softwaredefined instructions thus compilers interpreters generally turn source code text files tokens may may generate parse tree may generate immediate instructions stack machine quadruple code means basic difference compiler system including built separate linker generates standalone machine code program interpreter system instead performs actions described high level program compiler thus make almost conversions source code semantics machine level ie program changed interpreter conversion work every time statement function executed however efficient interpreter much translation work including analysis types similar factored done first time program module function even statement run thus quite akin compiler works however compiled program still runs much faster circumstances part compilers designed optimize code may given ample time especially true simpler high level languages without many dynamic data structures checks typechecks traditional compilation executable output linkers exe files dll files library see picture typically relocatable run general operating system much like object code modules difference relocation done dynamically run time ie program loaded execution hand compiled linked programs small embedded systems typically statically allocated often hard coded flash memory often secondary storage operating system sense historically interpretersystems selfcontained editor built becoming common also compilers often called ide although programmers prefer use editor choice run compiler linker tools manually historically compilers predate interpreters hardware time could support interpreter interpreted code typical batch environment time limited advantages interpretation development cycle software development cycle programmers make frequent changes source code using compiler time change made source code must wait compiler translate altered source files link binary code files together program executed larger program longer wait contrast programmer using interpreter lot less waiting interpreter usually needs translate code worked intermediate representation translate thus requiring much less time changes tested effects evident upon saving source code reloading program compiled code generally less readily debugged editing compiling linking sequential processes conducted proper sequence proper set commands reason many compilers also executive aid known make file program make file lists compiler linker command lines program source code files might take simple command line menu input eg make 3 selects third group set instructions issues commands compiler linker feeding specified source code files distribution compiler converts source code binary instruction specific processors architecture thus making less portable conversion made developers environment binary distributed users machines executed without translation cross compiler generate binary code user machine even different processor machine code compiled interpreted program distributed source code needs translated final machine takes time makes program distribution independent machines architecture however portability interpreted source code dependent target machine actually suitable interpreter interpreter needs supplied along source overall installation process complex delivery monolithic executable since interpreter part need installed fact interpreted code easily read copied humans concern point view copyright however various systems encryption obfuscation exist delivery intermediate code bytecode similar effect obfuscation bytecode could decoded decompiler disassembler efficiency main disadvantage interpreters interpreted program typically runs slower compiled difference speeds could tiny great often order magnitude sometimes generally takes longer run program interpreter run compiled code take less time interpret total time required compile run especially important prototyping testing code editinterpretdebug cycle often much shorter editcompilerundebug cycle interpreting code slower running compiled code interpreter must analyze statement program time executed perform desired action whereas compiled code performs action within fixed context determined compilation runtime analysis known interpretive overhead access variables also slower interpreter mapping identifiers storage locations must done repeatedly runtime rather compile time various compromises development speed using interpreter execution speed using compiler systems lisps allow interpreted compiled code call share variables means routine tested debugged interpreter compiled thus benefit faster execution routines developed many interpreters execute source code stands convert compact internal form many basic interpreters replace keywords single byte tokens used find instruction jump table interpreters pbasic interpreter achieve even higher levels program compaction using bitoriented rather byteoriented program memory structure commands tokens occupy perhaps 5 bits nominally 16bit constants stored variablelength code requiring 3 6 10 18 bits address operands include bit offset many basic interpreters store read back tokenized internal representation interpreter might well use lexical analyzer parser compiler interpret resulting abstract syntax tree example data type definitions latter toy interpreter syntax trees obtained c expressions shown box regression interpretation used sole method execution even though interpreter interpreted directly executed program needed somewhere bottom stack code interpreted definition machine code cpu execute variations bytecode interpreters spectrum possibilities interpreting compiling depending amount analysis performed program executed example emacs lisp compiled bytecode highly compressed optimized representation lisp source machine code therefore tied particular hardware compiled code interpreted bytecode interpreter written c compiled code case machine code virtual machine implemented hardware bytecode interpreter compiling interpreters sometimes also called compreters bytecode interpreter instruction starts byte therefore bytecode interpreters 256 instructions although may used bytecodes may take multiple bytes may arbitrarily complicated control tables necessarily ever need pass compiling phase dictate appropriate algorithmic control flow via customized interpreters similar fashion bytecode interpreters threaded code interpreters threaded code interpreters similar bytecode interpreters instead bytes use pointers instruction word points function instruction sequence possibly followed parameter threaded code interpreter either loops fetching instructions calling functions point fetches first instruction jumps every instruction sequence ends fetch jump next instruction unlike bytecode effective limit number different instructions available memory address space classic example threaded code forth code used open firmware systems source language compiled f code bytecode interpreted virtual machine abstract syntax tree interpreters spectrum interpreting compiling another approach transform source code optimized abstract syntax tree ast execute program following tree structure use generate native code justintime approach sentence needs parsed advantage bytecode ast keeps global program structure relations statements lost bytecode representation compressed provides compact representation thus using ast proposed better intermediate format justintime compilers bytecode also allows system perform better analysis runtime however interpreters ast causes overhead bytecode interpreter nodes related syntax performing useful work less sequential representation requiring traversal pointers overhead visiting tree justintime compilation blurring distinction interpreters bytecode interpreters compilation justintime compilation jit technique intermediate representation compiled native machine code runtime confers efficiency running native code cost startup time increased memory use bytecode ast first compiled adaptive optimization complementary technique interpreter profiles running program compiles frequently executed parts native code techniques decades old appearing languages smalltalk 1980s justintime compilation gained mainstream attention amongst language implementers recent years java net framework modern javascript implementations matlab including jits selfinterpreter selfinterpreter programming language interpreter written programming language interpret example basic interpreter written basic selfinterpreters related selfhosting compilers compiler exists language interpreted creating selfinterpreter requires implementation language host language may another programming language assembler first interpreter system bootstrapped new versions interpreter developed language way donald knuth developed tangle interpreter language web industrial standard tex typesetting system defining computer language usually done relation abstract machine socalled operational semantics mathematical function denotational semantics language may also defined interpreter semantics host language given definition language selfinterpreter wellfounded define language selfinterpreter tells reader expressiveness elegance language also enables interpreter interpret source code first step towards reflective interpreting important design dimension implementation selfinterpreter whether feature interpreted language implemented feature interpreters host language example whether closure lisplike language implemented using closures interpreter language implemented manually data structure explicitly storing environment features implemented feature host language less control programmer interpreter different behavior dealing number overflows realized arithmetic operations delegated corresponding operations host language languages elegant selfinterpreter lisp prolog much research selfinterpreters particularly reflective interpreters conducted scheme programming language dialect lisp general however turingcomplete language allows writing interpreter lisp language lisp programs lists symbols lists xslt language xslt programs written xml subdomain metaprogramming writing domainspecific languages dsls clive gifford introduced measure quality selfinterpreter eigenratio limit ratio computer time spent running stack n selfinterpreters time spent run stack n 1 selfinterpreters n goes infinity value depend program run book structure interpretation computer programs presents examples metacircular interpretation scheme dialects examples languages selfinterpreter forth pascal microcode microcode commonly used technique imposes interpreter hardware architectural level computer microcode layer hardwarelevel instructions implement higherlevel machine code instructions internal state machine sequencing many digital processing elements microcode used generalpurpose central processing units well specialized processors microcontrollers digital signal processors channel controllers disk controllers network interface controllers network processors graphics processing units hardware microcode typically resides special highspeed memory translates machine instructions state machine data input sequences detailed circuitlevel operations separates machine instructions underlying electronics instructions designed altered freely also facilitates building complex multistep instructions reducing complexity computer circuits writing microcode often called microprogramming microcode particular processor implementation sometimes called microprogram extensive microcoding allows small simple microarchitectures emulate powerful architectures wider word length execution units relatively simple way achieve software compatibility different products processor family applications interpreters frequently used execute command languages glue languages since operator executed command language usually invocation complex routine editor compiler selfmodifying code easily implemented interpreted language relates origins interpretation lisp artificial intelligence research virtualization machine code intended hardware architecture run using virtual machine often used intended architecture unavailable among uses running multiple copies sandboxing types sandboxes rely operating system protections interpreter virtual machine often used actual hardware architecture originally intended hardware architecture may may may seem pointless except sandboxes compelled actually execute instructions source code processing particular refuse execute code violates security constraints operating emulators running computer software written obsolete unavailable hardware modern equipment software quality context software engineering software quality refers two related distinct notions software functional quality reflects well complies conforms given design based functional requirements specifications attribute also described fitness purpose piece software compares competitors marketplace worthwhile product degree correct software produced software structural quality refers meets nonfunctional requirements support delivery functional requirements robustness maintainability lot degree software works needed many aspects structural quality evaluated statically analysis software inner structure source code unit level technology level system level effect architecture adheres sound principles software architecture outlined paper topic omg structural qualities usability assessed dynamically users others acting behalf interact software least prototype partial implementation even interaction mock version made cardboard represents dynamic test version considered prototype aspects reliability might involve software also underlying hardware therefore assessed statically dynamically stress test functional quality typically assessed dynamically also possible use static tests software reviews historically structure classification terminology attributes metrics applicable software quality management derived extracted iso 91263 subsequent iso 250002005 quality model also known square based models consortium software quality cisq defined five major desirable structural characteristics needed piece software provide business value reliability efficiency security maintainability adequate size software quality measurement quantifies extent software program system rates along five dimensions aggregated measure software quality computed qualitative quantitative scoring scheme mix weighting system reflecting priorities view software quality positioned linear continuum supplemented analysis critical programming errors specific circumstances lead catastrophic outages performance degradations make given system unsuitable use regardless rating based aggregated measurements programming errors found system level represent 90 production issues whilst unitlevel even far numerous programming errors account less 10 production issues consequence code quality without context whole system w edwards deming described limited value view explore analyze communicate software quality measurements concepts techniques information visualization provide visual interactive means useful particular several software quality measures related components software system example software maps represent specialized approach express combine information software development software quality system dynamics definitions many different definitions quality capability software product conform requirements isoiec 9001 commented others synonymous customer value highsmith 2002 even defect level first definition quality history remembers shewhart beginning 20th century two common aspects quality one consideration quality thing objective reality independent existence man think feel sense result objective reality words subjective side quality shewhart measurement although concepts presented section applicable structural functional software quality measurement latter essentially performed testing see main article software testing introduction software quality measurement quantifying extent system software possesses desirable characteristics performed qualitative quantitative means mix cases desirable characteristic set measurable attributes existence piece software system tend correlated associated characteristic example attribute associated portability number targetdependent statements program precisely using quality function deployment approach measurable attributes hows need enforced enable whats software quality definition structure classification terminology attributes metrics applicable software quality management derived extracted iso 91263 subsequent isoiec 250002005 quality model main focus internal structural quality subcategories created handle specific areas like business application architecture technical characteristics data access manipulation notion transactions dependence tree software quality characteristics measurable attributes represented diagram right 5 characteristics matter user right owner business system depends measurable attributes left application architecture practices coding practices application complexity documentation portability technical functional volume correlations programming errors production defects unveil basic code errors account 92 total errors source code numerous codelevel issues eventually count 10 defects production bad software engineering practices architecture levels account 8 total defects consume half effort spent fixing problems lead 90 serious reliability security efficiency issues production codebased analysis many existing software measures count structural elements application result parsing source code individual instructions park 1992 tokens halstead 1977 control structures mccabe 1976 objects chidamber kemerer 1994 software quality measurement quantifying extent system software rates along dimensions analysis performed using qualitative quantitative approach mix provide aggregate view using example weighted averages reflect relative importance factors measured view software quality linear continuum supplemented identification discrete critical programming errors vulnerabilities may fail test case result bad practices specific circumstances lead catastrophic outages performance degradations security breaches corrupted data myriad problems nygard 2007 make given system de facto unsuitable use regardless rating based aggregated measurements wellknown example vulnerability common weakness enumeration repository vulnerabilities source code make applications exposed security breaches measurement critical application characteristics involves measuring structural attributes applications architecture coding inline documentation displayed picture thus characteristic affected attributes numerous levels abstraction application must included calculating characteristics measure valuable predictor quality outcomes affect business layered approach calculating characteristic measures displayed figure first proposed boehm colleagues trw boehm 1978 approach taken iso 9126 25000 series standards attributes measured parsed results static analysis application source code even dynamic characteristics applications reliability performance efficiency causal roots static structure application structural quality analysis measurement performed analysis source code architecture software framework database schema relationship principles standards together define conceptual logical architecture system distinct basic local componentlevel code analysis typically performed development tools mostly concerned implementation considerations crucial debugging testing activities reliability root causes poor reliability found combination noncompliance good architectural coding practices noncompliance detected measuring static quality attributes application assessing static attributes underlying applications reliability provides estimate level business risk likelihood potential application failures defects application experience placed operation assessing reliability requires checks least following software engineering best practices technical attributes depending application architecture thirdparty components used external libraries frameworks custom checks defined along lines drawn list best practices ensure better assessment reliability delivered software efficiency reliability causes performance inefficiency often found violations good architectural coding practice detected measuring static quality attributes application static attributes predict potential operational performance bottlenecks future scalability problems especially applications requiring high execution speed handling complex algorithms huge volumes data assessing performance efficiency requires checking least following software engineering best practices technical attributes application architecture practices appropriate interactions expensive andor remote resources data access performance data management memory network disk space management coding practices compliance objectoriented structured programming best practices appropriate compliance sql programming best practices security security vulnerabilities result poor coding architectural practices sql injection crosssite scripting well documented lists maintained cwe seicomputer emergency center cert carnegie mellon university assessing security requires least checking following software engineering best practices technical attributes application architecture practices multilayer design compliance security best practices input validation sql injection crosssite scripting etc programming practices code level error exception handling security best practices system functions access access control programs maintainability maintainability includes concepts modularity understandability changeability testability reusability transferability one development team another take form critical issues code level rather poor maintainability typically result thousands minor violations best practices documentation complexity avoidance strategy basic programming practices make difference clean easytoread code vs unorganized difficulttoread code assessing maintainability requires checking following software engineering best practices technical attributes maintainability closely related ward cunninghams concept technical debt expression costs resulting lack maintainability reasons maintainability low classified reckless vs prudent deliberate vs inadvertent often origin developers inability lack time goals carelessness discrepancies creation cost benefits documentation particular maintainable source code size measuring software size requires whole source code correctly gathered including database structure scripts data manipulation source code component headers configuration files etc essentially two types software sizes measured technical size footprint functional size several software technical sizing methods widely described common technical sizing method number lines code loc per technology number files functions classes tables etc backfiring function points computed common measuring functional size function point analysis function point analysis measures size software deliverable users perspective function point sizing done based user requirements provides accurate representation size developerestimator value functionality delivered reflects business functionality delivered customer method includes identification weighting user recognizable inputs outputs data stores size value available use conjunction numerous measures quantify evaluate software delivery performance development cost per function point delivered defects per function point function points per staff month function point analysis sizing standard supported international function point users group ifpug applied early software development lifecycle dependent lines code like somewhat inaccurate backfiring method method technology agnostic used comparative analysis across organizations across industries since inception function point analysis several variations evolved family functional sizing techniques broadened include sizing measures cosmic nesma use case points fp lite early quick fps recently story points however function points history statistical accuracy used common unit work measurement numerous application development management adm outsourcing engagements serving currency services delivered performance measured one common limitation function point methodology manual process therefore laborintensive costly large scale initiatives application development outsourcing engagements negative aspect applying methodology may motivated industry leaders form consortium software quality focused introducing computable metrics standard automating measuring software size ifpug keep promoting manual approach activity rely fp counters certifications cisq announced availability first metric standard automated function pointsto cisq membership cisq technical recommendations developed omgs request comment format submitted omgs process standardization identifying critical programming errors critical programming errors specific architectural andor coding bad practices result highest immediate long term business disruption risk quite often technologyrelated depend heavily context business objectives risks may consider respect naming conventions others preparing ground knowledge transfer example consider absolutely critical critical programming errors also classified per cisq characteristics basic example reliability avoid software patterns lead unexpected behavior uninitialized variable null pointers etc methods procedures functions insert update delete create table select must include error management multithread functions made thread safe instance servlets struts action classes must instancenonfinal static fields efficiency ensure centralization client requests incoming data reduce network traffic avoid sql queries dont use index large tables loop security avoid fields servlet classes final static avoid data access without including error management check control return codes implement error handling mechanisms ensure input validation avoid crosssite scripting flaws sql injections flaws maintainability deep inheritance trees nesting avoided improve comprehensibility modules loosely coupled fanout intermediaries avoid propagation modifications enforce homogeneous naming conventions operationalized quality models newer proposals quality models squale quamoco propagate direct integration definition quality attributes measurement breaking quality attributes even defining additional layers complex abstract quality attributes reliability maintainability become manageable measurable quality models applied industrial contexts received widespread adoption network performance network performance refers measures service quality network seen customer many different ways measure performance network network different nature design performance also modeled simulated instead measured one example using state transition diagrams model queuing performance use network simulator performance measures following measures often considered important bandwidth commonly measured bitssecond maximum rate information transferred throughput actual rate information transferred latency delay sender receiver decoding mainly function signals travel time processing time nodes information traverses jitter variation packet delay receiver information error rate number corrupted bits expressed percentage fraction total sent bandwidth available channel bandwidth achievable signaltonoise ratio determine maximum possible throughput generally possible send data dictated shannonhartley theorem throughput throughput number messages successfully delivered per unit time throughput controlled available bandwidth well available signaltonoise ratio hardware limitations throughput purpose article understood measured arrival first bit data receiver decouple concept throughput concept latency discussions type terms throughput bandwidth often used interchangeably time window period throughput measured choice appropriate time window often dominate calculations throughput whether latency taken account determine whether latency affects throughput latency speed light imposes minimum propagation time electromagnetic signals possible reduce latency c displaystyle tsc_m distance c speed light medium approximately means 1 extra millisecond roundtrip time rtt 100 km62miles distance hosts delays also occur intermediate nodes packet switched networks delays occur due queueing jitter jitter undesired deviation true periodicity assumed periodic signal electronics telecommunications often relation reference clock source jitter may observed characteristics frequency successive pulses signal amplitude phase periodic signals jitter significant usually undesired factor design almost communications links eg usb pcie sata oc48 clock recovery applications called timing jitter error rate digital transmission number bit errors number received bits data stream communication channel altered due noise interference distortion bit synchronization errors bit error rate bit error ratio ber number bit errors divided total number transferred bits studied time interval ber unitless performance measure often expressed percentage bit error probability p e expectation value ber ber considered approximate estimate bit error probability estimate accurate long time interval high number bit errors interplay factors factors coupled user requirements user perceptions play role determining perceived fastness utility network connection relationship throughput latency user experience aptly understood context shared network medium scheduling problem algorithms protocols systems latency throughput coupled entities tcpip latency also directly affect throughput tcp connections large bandwidthdelay product high latency connections combined relatively small tcp window sizes many devices effectively causes throughput high latency connection drop sharply latency remedied various techniques increasing tcp congestion window size drastic solutions packet coalescing tcp acceleration forward error correction commonly used high latency satellite links tcp acceleration converts tcp packets stream similar udp tcp acceleration software must provide mechanisms ensure reliability link taking latency bandwidth link account ends high latency link must support method used media access control mac layer performance issues throughput endtoend delay also addressed examples latency throughput dominated systems many systems characterized dominated either throughput limitations latency limitations terms enduser utility experience cases hard limits speed light present unique problems systems nothing done correct systems allow significant balancing optimization best user experience satellite telecom satellite geosynchronous orbit imposes path length least 71000 km transmitter receiver means minimum delay message request message receipt latency 473 ms delay noticeable affects satellite phone service regardless available throughput capacity deep space communication long path length considerations exacerbated communicating space probes longrange targets beyond earths atmosphere deep space network implemented nasa one system must cope problems largely latency driven gao criticized current architecture several different methods proposed handle intermittent connectivity long delays packets delaytolerant networking even deeper space communication interstellar distances difficulties designing radio systems achieve throughput massive cases maintaining communication bigger issue long communication takes offline data transport transportation concerned almost entirely throughput physical deliveries backup tape archives still largely done vehicle computer architecture computer engineering computer architecture set rules methods describe functionality organization implementation computer systems definitions architecture define describing capabilities programming model computer particular implementation definitions computer architecture involves instruction set architecture design microarchitecture design logic design implementation subcategories discipline computer architecture three main subcategories instruction set architecture isa isa defines machine code processor reads acts upon well word size memory address modes processor registers data type microarchitecture computer organization describes particular processor implement isa size computers cpu cache instance issue generally nothing isa system design includes hardware components within computing system include data processing cpu direct memory access dma issues virtualization multiprocessing software features types computer architecture following types used bigger companies like intel count 1 computer architecture macroarchitecture architectural layers abstract microarchitecture assembly instruction set architecture isa smart assembler may convert abstract assembly language common group machines slightly different machine language different implementations programmer visible macroarchitecture higher level language tools compilers may define consistent interface contract programmers using abstracting differences underlying isa uisa microarchitectures eg c c java standards define different programmer visible macroarchitecture uisa microcode instruction set architecturea group machines different hardware level microarchitectures may share common microcode architecture hence uisa pin architecture hardware functions microprocessor provide hardware platform eg x86 pins a20m ferrignne flush also messages processor emit external caches invalidated emptied pin architecture functions flexible isa functions external hardware adapt new encodings change pin message term architecture fits functions must provided compatible systems even detailed method changes roles definition computer architecture concerned balancing performance efficiency cost reliability computer system case instruction set architecture used illustrate balance competing factors complex instruction sets enable programmers write space efficient programs since single instruction encode higher level abstraction x86 loop instruction however longer complex instructions take longer processor decode costly implement effectively increased complexity large instruction set also creates room unreliability instructions interact unexpected ways implementation involves integrated circuit design packaging power cooling optimization design requires familiarity compilers operating systems logic design packaging instruction set architecture instruction set architecture isa interface computers software hardware also viewed programmers view machine computers understand highlevel programming languages java c programming languages used processor understands instructions encoded numerical fashion usually binary numbers software tools compilers translate high level languages instructions processor understand besides instructions isa defines items computer available programeg data types registers addressing modes memory instructions locate available items register indexes names memory addressing modes isa computer usually described small instruction manual describes instructions encoded also may define short vaguely mnemonic names instructions names recognized software development tool called assembler assembler computer program translates humanreadable form isa computerreadable form disassemblers also widely available usually debuggers software programs isolate correct malfunctions binary computer programs isas vary quality completeness good isa compromises programmer convenience easy code understand size code much code required specific action cost computer interpret instructions complexity means hardware needed decode execute instructions speed computer complex decoding hardware comes longer decode time memory organization defines instructions interact memory memory interacts design emulation software emulators run programs written proposed instruction set modern emulators measure size cost speed determine particular isa meeting goals computer organization computer organization helps optimize performancebased products example software engineers need know processing power processors may need optimize software order gain performance lowest price require quite detailed analysis computers organization example sd card designers might need arrange card data processed fastest possible way computer organization also helps plan selection processor particular project multimedia projects may need rapid data access virtual machines may need fast interrupts sometimes certain tasks need additional components well example computer capable running virtual machine needs virtual memory hardware memory different virtual computers kept separated computer organization features also affect power consumption processor cost implementation instruction set microarchitecture designed practical machine must developed design process called implementation implementation usually considered architectural design rather hardware design engineering implementation broken several steps logic implementation designs circuits required logic gate level circuit implementation transistorlevel designs basic elements gates multiplexers latches etc well larger blocks alus caches etc may implemented log gate level even physical level design calls physical implementation draws physical circuits different circuit components placed chip floorplan board wires connecting created design validation tests computer whole see works situations timings design validation process starts design logic level tested using logic emulators however usually slow run realistic test making corrections based first test prototypes constructed using fieldprogrammable gatearrays fpgas hobby projects stop stage final step test prototype integrated circuits integrated circuits may require several redesigns fix problems cpus entire implementation process organized differently often referred cpu design design goals exact form computer system depends constraints goals computer architectures usually trade standards power versus performance cost memory capacity latency latency amount time takes information one node travel source throughput sometimes considerations features size weight reliability expandability also factors common scheme depth power analysis figures keep power consumption low maintaining adequate performance performance modern computer performance often described ipc instructions per cycle measures efficiency architecture clock frequency since faster rate make faster computer useful measurement older computers ipc counts low 01 instructions per cycle simple modern processors easily reach near 1 superscalar processors may reach three five ipc executing several instructions per clock cycle counting machine language instructions would misleading varying amounts work different isas instruction standard measurements count isas actual machine language instructions unit measurement usually based speed vax computer architecture many people used measure computers speed clock rate usually mhz ghz refers cycles per second main clock cpu however metric somewhat misleading machine higher clock rate may necessarily greater performance result manufacturers moved away clock speed measure performance factors influence speed mix functional units bus speeds available memory type order instructions programs two main types speed latency throughput latency time start process completion throughput amount work done per unit time interrupt latency guaranteed maximum response time system electronic event like disk drive finishes moving data performance affected wide range design choices example pipelining processor usually makes latency worse makes throughput better computers control machinery usually need low interrupt latencies computers operate realtime environment fail operation completed specified amount time example computercontrolled antilock brakes must begin braking within predictable short time brake pedal sensed else failure brake occur benchmarking takes factors account measuring time computer takes run series test programs although benchmarking shows strengths shouldnt choose computer often measured machines split different measures example one system might handle scientific applications quickly another might render video games smoothly furthermore designers may target add special features products hardware software permit specific benchmark execute quickly dont offer similar advantages general tasks power efficiency power efficiency another important measurement modern computers higher power efficiency often traded lower speed higher cost typical measurement referring power consumption computer architecture mipsw millions instructions per second per watt modern circuits less power required per transistor number transistors per chip grows transistor put new chip requires power supply requires new pathways built power however number transistors per chip starting increase slower rate therefore power efficiency starting become important important fitting transistors single chip recent processor designs shown emphasis put focus power efficiency rather cramming many transistors single chip possible world embedded computers power efficiency long important goal next throughput latency network architecture network architecture design computer network framework specification networks physical components functional organization configuration operational principles procedures well communication protocols used telecommunication specification network architecture may also include detailed description products services delivered via communications network well detailed rate billing structures services compensated network architecture internet predominantly expressed use internet protocol suite rather specific model interconnecting networks nodes network usage specific types hardware links osi network model open systems interconnection model osi model defines codifies concept layered network architecture abstraction layers used subdivide communications system smaller manageable parts layer collection similar functions provide services layer receives services layer layer instance provides services instances layer requests service layer distributed computing distinct usage distributed computing network architecture often describes structure classification distributed application architecture participating nodes distributed application often referred network example applications architecture public switched telephone network pstn termed intelligent network number specific classifications lie continuum dumb network eg internet intelligent network eg telephone network popular example usage term distributed applications well pvcs permanent virtual circuits organization nodes peertopeer p2p services networks p2p networks usually implement overlay networks running underlying physical logical network overlay networks may implement certain organizational structures nodes according several distinct models network architecture system networking hardware networking hardware also known network equipment computer networking devices electronic devices required communication interaction devices computer network specifically mediate data transmission computer network units last receiver generate data called hosts data terminal equipment range networking devices may include gateways routers network bridges modems wireless access points networking cables line drivers switches hubs repeaters may also include hybrid network devices multilayer switches protocol converters bridge routers proxy servers firewalls network address translators multiplexers network interface controllers wireless network interface controllers isdn terminal adapters related hardware common kind networking hardware today copperbased ethernet adapter standard inclusion modern computer systems wireless networking become increasingly popular especially portable handheld devices networking hardware used computers includes data center equipment file servers database servers storage areas network services dns dhcp email etc well devices assure content delivery taking wider view mobile phones tablet computers devices associated internet things may also considered networking hardware technology advances ipbased networks integrated building infrastructure household utilities network hardware become ambiguous term owing vastly increasing number network capable endpoints specific devices network hardware classified location role network core core network components interconnect network components gateway interface providing compatibility networks converting transmission speeds protocols codes security measures router networking device forwards data packets computer networks routers perform traffic directing functions internet data packet typically forwarded one router another networks constitute internetwork reaches destination node works osi layer 3 switch device connects devices together computer network using packet switching receive process forward data destination device unlike less advanced network hubs network switch forwards data one multiple devices need receive rather broadcasting data ports works osi layer 2 bridge device connects multiple network segments works osi layers 1 2 repeater electronic device receives signal retransmits higher level higher power onto side obstruction signal cover longer distances repeater hub connecting multiple ethernet devices together making act single network segment multiple inputoutput io ports signal introduced input port appears output every port except original incoming hub works physical layer layer 1 osi model repeater hubs also participate collision detection forwarding jam signal ports detects collision hubs largely obsolete replaced network switches except old installations specialized applications hybrid hybrid components found core border network multilayer switch switch addition switching osi layer 2 provides functionality higher protocol layers protocol converter hardware device converts two different types transmission interoperation bridge router brouter device works bridge router brouter routes packets known protocols simply forwards packets bridge would border hardware software components typically sit connection point different networks example internal network external network include proxy server computer network service allows clients make indirect network connections network services firewall piece hardware software put network prevent communications forbidden network policy firewall typically establishes barrier trusted secure internal network another outside network internet assumed secure trusted network address translator nat network service provided hardware software converts internal external network addresses vice versa end stations hardware devices used establishing networks dialup connections include network interface controller nic device connecting computer wirebased computer network wireless network interface controller device connecting attached computer radiobased computer network modem device modulates analog carrier signal sound encode digital information also demodulates carrier signal decode transmitted information used example computer communicates another computer telephone network isdn terminal adapter ta specialized gateway isdn line driver device increase transmission distance amplifying signal used baseband networks